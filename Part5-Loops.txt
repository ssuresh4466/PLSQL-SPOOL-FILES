
LOOPS:
******
Loop is one type of control structure.
Loops are useful to execute the set of stmts repeatedly.
In oracle , we have 3 types of loops.

i) simple Loop
ii) For Loop
iii) While Loop



1) simple loop
**************
syn:	LOOP
	stmt;
	stmt;
	EXIT  WHEN(condition);
	stmt;
	stmt;
	END LOOP;


--No condition check before entering in to the loop
--Before exit from the loop, it will check condition, 
   if the condition is  true then loop execution terminates,
   if the condition fails then loop execution is continue.

   
2) FOR LOOP
***********
   syn:	
        FOR   <var>   IN [REVERSE] first_val .. Last_val
        LOOP
        stmt;
        stmt;
	-----
        END LOOP;

Ex:		
begin
for x in 1..5
loop
dbms_output.put_line(x);
end loop;
end;

output:
1
2
3
4
5

Ex:		
begin
for x in REVERSE 1..5
loop
dbms_output.put_line(x);
end loop;
end;

OUTPUT:
5
4
3
2
1


--No condition check before entering in to the loop.
--The for loop variable need not be declared.
--IN operator takes the values from first value to last value 
   from the range
--Reverse operator enables IN to take the values from 
   last to first.
--Range is specified using ..(dot dot) operator.


   3) WHILE LOOP
   *************
   syn:	WHILE ( cond )
	LOOP
	stmt;
	stmt;
	-----
	-----
	END LOOP;


--Condition check before entering into loop.
--If the condition failed then the loop execution terminates.



Ex:	
write a procedure to display the sequential values from 
1 to 10 using above loops?


	create or replace procedure proc_seqnos is

	x	int:=1;
	begin
	dbms_output.put_line(' By using  simple loop');
	dbms_output.put_line('-----------------------');
	--SIMPLE LOOP LOGIC
	loop
	dbms_output.put_line(x);
	x:=x+1;
	exit when(x > 10);
	end loop;
	DBMS_OUTPUT.PUT_LINE(chr(10)||' END  OF SIMPLE LOOP');
	
	
	dbms_output.put_line(chr(10)||' By using for loop');
	dbms_output.put_line('-----------------------');

	for y in 1..10
	loop
	dbms_output.put_line(y);
	end loop;
	DBMS_OUTPUT.PUT_LINE(chr(10)||' END  OF FOR LOOP');
	
	
--Display reverse numbers from 10 to 1 using For Loop

	dbms_output.put_line(' By using for loop , Displaying 1 to 10 values in reverse');
	dbms_output.put_line	('-----------------------------------------------------------');

	for y in REVERSE 1..10
	loop
	dbms_output.put_line(y);
	end loop;

	DBMS_OUTPUT.PUT_LINE(' END  OF FOR LOOP');
	DBMS_OUTPUT.PUT_LINE('  ');

dbms_output.put_line( ' current value of x: ' || x);

	dbms_output.put_line(' I want to start from x=1 again, so reassign its value');
	x:=1;
dbms_output.put_line( ' New value of x: ' || x);
dbms_output.put_line(' By using while loop');
	dbms_output.put_line('-----------------------');
	
while(x<=10)
	loop
	dbms_output.put_line(x);
	x:=x+1;
	end loop;

	DBMS_OUTPUT.PUT_LINE(' END  OF WHILE LOOP');
	end proc_seqnos;


Ex:	
write a procedure to display  even numbers from given number 
to given number? 

create or replace procedure proc_even(a  int,  b  int)
is
r int;
x int;
y int;
begin
x:=a;
y:=b;
if(x <= y) then
dbms_output.put_line
(' EVEN NUMBERS FROM  '||x||' TO '||y);
dbms_output.put_line
('************************************');
while (x<=y)
loop
select mod(x,2) into r from dual;
if(r=0) then
dbms_output.put_line('Even-'||x);
end if;
x:=x+1;
end loop;
else
dbms_output.put_line(' Invalid Range ');
end if;
end proc_even;



Ex:	
write a procedure to insert the values like radius, 
pi value and area values into the table "circle"
for the radius range 1 to 20?	

	create table circle
	(
	radius number(2),
	pi number(3,2),
	area number(6,2)
	);

	create or replace procedure proc_circle_area 
	is
	pi constant number(3,2):=3.14;
	a number(7,2);
	begin
	for r in 1..20
	loop
	a:=pi*r*r;
	insert into circle values(r,pi,a);
	end loop;
                COMMIT;
	dbms_output.put_line
    (' Inserting records is completed. ,'||chr(10)||
     ' Please check the table - circle -');
	end proc_circle_area;
	

sample output:

exec proc_circle_area;

select * from circle;




anonymous block completed
    RADIUS         PI       AREA
---------- ---------- ----------
         1       3.14       3.14 
         2       3.14      12.56 
         3       3.14      28.26 
         4       3.14      50.24 
         5       3.14       78.5 
         6       3.14     113.04 
         7       3.14     153.86 
         8       3.14     200.96 
         9       3.14     254.34 
        10       3.14        314 

 10 rows selected 


	

Ex:	
write a procedure to display reverse number for the given 
number?


create or replace procedure proc_revno(n  number)
is
rn  number;
begin
for x in reverse 1..length(n)
loop
rn:=rn||substr(n,x,1);
end loop;
dbms_output.put_line(' Given number= '||n);
dbms_output.put_line(' Reverse number= '||rn);
end proc_revno;


 n	1..length(n)   x	substr(n,x,1)	rn||substr(n,x,1)		rn

6329	1..4	       4	substr(6329,4,1)	  ||9			9
6329	1..3	       3	substr(6329,3,1)	  9||2			92
6329	1..2	       2	substr(6329,2,1)	  92||3			923
6329	1..1	       1	substr(6329,1,1)	  923||6		9236				

	




------------------------------------------------------------------------------------------
Ex:
  write  a procedure to display emp details with
  given job?

create or replace procedure proc_emps
(vjob  emp.job%type)
as
begin
for r in (select * from emp where job=vjob)
loop
dbms_output.put_line
(chr(10)||
r.empno||' '||r.ename||' '||r.sal||' '||r.job||' '||r.hiredate||
' '||r.deptno);
end loop;
end proc_emps;
